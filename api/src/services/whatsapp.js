const { Client, LocalAuth } = require('whatsapp-web.js');
const pool = require('../config/database');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const {
  createCalendarEventWithValidation,
} = require('../config/google-calendar');
const { createAppointment } = require('../models/agendamento');

let client = null;
let qrString = '';
let status = 'disconnected';
let pausedUntil = null;
let initializationAttempt = 0;
let chatPauses = new Map();

function cleanupSession() {
  console.log('üßπ Cleaning up session and locks...');
  
  try {
    const lockFile = path.join(__dirname, '../../whatsapp-session/session/SingletonLock');
    if (fs.existsSync(lockFile)) {
      fs.unlinkSync(lockFile);
      console.log('‚úÖ Removed SingletonLock');
    }
    
    const lockPatterns = ['SingletonCookie', 'SingletonSocket', 'Singleton'];
    const sessionDir = path.join(__dirname, '../../whatsapp-session/session');
    
    if (fs.existsSync(sessionDir)) {
      const files = fs.readdirSync(sessionDir);
      files.forEach(file => {
        if (lockPatterns.some(pattern => file.includes(pattern))) {
          const filePath = path.join(sessionDir, file);
          try {
            fs.unlinkSync(filePath);
            console.log(`‚úÖ Removed ${file}`);
          } catch (err) {
            console.log(`‚ö†Ô∏è Could not remove ${file}:`, err.message);
          }
        }
      });
    }
    
    console.log('‚úÖ Session cleanup complete');
  } catch (err) {
    console.log('‚ö†Ô∏è Cleanup error (non-critical):', err.message);
  }
}

function killOldChromeProcesses() {
  return new Promise((resolve) => {
    console.log('üî™ Checking for old Chrome processes...');
    
    exec('pkill -9 chrome', (error, stdout, stderr) => {
      if (error) {
        console.log('‚ÑπÔ∏è No old Chrome processes found (or pkill not available)');
      } else {
        console.log('‚úÖ Killed old Chrome processes');
      }
      resolve();
    });
  });
}

async function initializeWhatsApp(forceNew = false) {
  if (client && !forceNew) {
    console.log('‚ö†Ô∏è Client already exists');
    if (client.pupBrowser) {
      console.log('‚ÑπÔ∏è Browser is still running, returning existing client');
      return client;
    } else {
      console.log('‚ö†Ô∏è Client exists but browser died, will create new one');
      client = null;
    }
  }

  initializationAttempt++;
  console.log(`\n${'='.repeat(80)}`);
  console.log(`üöÄ Initializing WhatsApp client (Attempt #${initializationAttempt})...`);
  console.log('='.repeat(80));

  await killOldChromeProcesses();
  cleanupSession();
  await new Promise(resolve => setTimeout(resolve, 2000));

  const executablePath = process.env.PUPPETEER_EXECUTABLE_PATH || '/usr/bin/chromium-browser';
  console.log('üîß Puppeteer executable path:', executablePath);

  client = new Client({
    authStrategy: new LocalAuth({
      dataPath: './whatsapp-session',
    }),
    puppeteer: {
      headless: true,
      executablePath,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--disable-gpu',
        '--disable-background-networking',
        '--disable-default-apps',
        '--disable-extensions',
        '--disable-sync',
        '--metrics-recording-only',
        '--mute-audio',
        '--no-first-run',
        '--safebrowsing-disable-auto-update',
        '--ignore-certificate-errors',
        '--ignore-ssl-errors',
        '--disable-features=IsolateOrigins,site-per-process',
        '--disable-blink-features=AutomationControlled',
        '--disable-web-security',
        '--user-data-dir=/tmp/puppeteer-user-data-' + Math.random().toString(36),
        '--disable-software-rasterizer',
        '--disable-extensions-file-access-check',
        '--disable-extensions-http-throttling',
      ],
      ignoreHTTPSErrors: true,
      timeout: 60000,
    },
  });

  client.on('qr', async (qr) => {
    if (status === 'connected') {
      console.log('‚ö†Ô∏è QR code event received but already connected, ignoring');
      return;
    }
    
    console.log('\n' + '='.repeat(80));
    console.log('üéØ QR CODE EVENT TRIGGERED!');
    console.log('='.repeat(80));
    
    try {
      const QRCode = require('qrcode');
      const qrBase64 = await QRCode.toDataURL(qr, {
        width: 300,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      });
      
      qrString = qrBase64;
      status = 'qr_ready';
      
      console.log('‚úÖ QR Code converted to Base64 PNG');
      console.log('üìè Base64 length:', qrBase64.length);
      console.log('='.repeat(80));
      
      try {
        const qrcodeTerminal = require('qrcode-terminal');
        console.log('\nüì± QR CODE NO TERMINAL:\n');
        qrcodeTerminal.generate(qr, { small: true });
        console.log('\n');
      } catch (err) {
        console.log('‚ö†Ô∏è qrcode-terminal not available');
      }
    } catch (err) {
      console.error('‚ùå Error converting QR to Base64:', err);
      qrString = qr;
      status = 'qr_ready';
    }
  });

  client.on('loading_screen', (percent, message) => {
    console.log(`üì± Loading: ${percent}% - ${message}`);
  });

  client.on('ready', () => {
    status = 'connected';
    qrString = '';
    initializationAttempt = 0;
    console.log('\n' + '='.repeat(80));
    console.log('‚úÖ WhatsApp client CONNECTED and READY!');
    console.log('='.repeat(80) + '\n');
  });

  client.on('authenticated', () => {
    status = 'authenticated';
    console.log('üîê Authentication successful');
  });

  client.on('auth_failure', (msg) => {
    status = 'auth_failure';
    qrString = '';
    console.error('‚ùå Authentication failed:', msg);
    console.log('üí° Tip: Delete whatsapp-session folder and try again');
  });

  client.on('disconnected', (reason) => {
    status = 'disconnected';
    qrString = '';
    console.log('üîå Client disconnected:', reason);
    cleanupSession();
    client = null;
    
    // Tentar reconectar automaticamente ap√≥s 30 segundos
    console.log('üîÑ Will attempt to reconnect in 30 seconds...');
    setTimeout(async () => {
      try {
        console.log('üîÑ Attempting automatic reconnection...');
        await initializeWhatsApp(true);
        await client.initialize();
      } catch (err) {
        console.error('‚ùå Auto-reconnection failed:', err.message);
      }
    }, 30000);
  });

  client.on('message', async (msg) => {
    await handleIncomingMessage(msg);
  });

  console.log('‚è≥ Client created, waiting for initialization...');
  return client;
}

async function handleIncomingMessage(msg) {
  try {
    console.log('\n' + '='.repeat(80));
    console.log('üì© NEW MESSAGE RECEIVED');
    console.log('='.repeat(80));
    
    // Verificar se √© mensagem de grupo e ignorar
    const chat = await msg.getChat();
    if (chat.isGroup) {
      console.log('üë• Message from GROUP - IGNORING');
      console.log('='.repeat(80) + '\n');
      return;
    }
    
    const contact = await msg.getContact();
    const fromNumber = contact.id.user;
    
    console.log('üìû From:', fromNumber);
    console.log('üí¨ Message:', msg.body);
    console.log('üÜî Message ID:', msg.id._serialized);
    
    const isEmployee = await checkIfEmployee(fromNumber);
    console.log('üë§ Is Employee:', isEmployee);
    
    if (isEmployee && status === 'connected') {
      console.log('üíº Employee replying to client - pausing bot for this chat');
      console.log(`‚è∏Ô∏è Pausing chat with ${fromNumber} for 2 hours`);
      
      await markChatAsHumanHandled(fromNumber);
      pauseChat(fromNumber, 2);
    }

    await saveMessage(msg.id._serialized, fromNumber, msg.body, msg.timestamp);
    console.log('üíæ Message saved to database');

    const chatPaused = isPaused(fromNumber);
    console.log('‚è∏Ô∏è Chat paused:', chatPaused);
    console.log('üîó Client status:', status);
    
    if (isEmployee) {
      console.log('‚è≠Ô∏è Skipping - message from employee');
    } else if (chatPaused) {
      console.log('‚è≠Ô∏è Skipping - chat is paused (human is handling)');
    } else if (status === 'connected') {
      console.log('‚úÖ Processing message with chatbot...');
      await processChatbotMessage(msg);
    } else {
      console.log('‚è≠Ô∏è Skipping - client not connected');
    }
    
    console.log('='.repeat(80) + '\n');
  } catch (error) {
    console.error('‚ùå ERROR in handleIncomingMessage:', error);
    console.error('Stack trace:', error.stack);
  }
}

async function checkIfEmployee(number) {
  const employees = process.env.EMPLOYEE_NUMBERS?.split(',').map(n => n.trim()) || [];
  const isEmployee = employees.includes(number);
  console.log('üë• Employee numbers configured:', employees);
  console.log('üîç Checking number:', number, '- Result:', isEmployee);
  return isEmployee;
}

async function markChatAsHumanHandled(phoneNumber) {
  try {
    console.log(`üìù Marking chat ${phoneNumber} as human-handled`);
    
    const result = await pool.query(
      `SELECT id, metadata FROM sessions WHERE phone_number = $1`,
      [phoneNumber]
    );
    
    if (result.rows.length > 0) {
      const session = result.rows[0];
      const metadata = session.metadata || {};
      
      metadata.humanHandled = true;
      metadata.humanHandledAt = new Date().toISOString();
      
      await pool.query(
        `UPDATE sessions SET metadata = $1, updated_at = NOW() WHERE id = $2`,
        [JSON.stringify(metadata), session.id]
      );
      
      console.log('‚úÖ Chat marked as human-handled');
    }
  } catch (error) {
    console.error('‚ùå Error marking chat as human-handled:', error);
  }
}

async function saveMessage(messageId, fromNumber, body, timestamp) {
  try {
    const tsMs = typeof timestamp === 'number' ? (timestamp * 1000) : Date.now();
    await pool.query(
      `INSERT INTO messages (id, from_number, body, timestamp, created_at)
       VALUES ($1, $2, $3, $4, NOW())
       ON CONFLICT (id) DO NOTHING`,
      [messageId, fromNumber, body, tsMs]
    );
  } catch (error) {
    console.error('‚ùå Error saving message:', error);
  }
}

async function processChatbotMessage(msg) {
  try {
    console.log('ü§ñ Starting chatbot processing...');
    
    const contact = await msg.getContact();
    const fromNumber = contact.id.user;
    
    console.log('üìã Getting or creating session...');
    const sessionId = await getOrCreateSession(fromNumber);
    console.log('‚úÖ Session ID:', sessionId);
    
    console.log('üìä Getting conversation state...');
    const state = await getConversationState(sessionId);
    console.log('‚úÖ Current state:', JSON.stringify(state));
    
    console.log('üß† Generating chatbot response...');
    const response = await generateChatbotResponse(msg.body, state, contact);

    // Tentar agendar automaticamente se mensagem tiver data/hor√°rio e tipo
    // Tentar agendar automaticamente se mensagem tiver data/hor√°rio e tipo
    const schedulingResult = await tryScheduleFromMessage(msg.body, state.metadata, contact, fromNumber);
    if (schedulingResult?.scheduled) {
      // Mensagem determin√≠stica de confirma√ß√£o (evita contradi√ß√£o do LLM)
      const confirmation = `‚úÖ Agendamento confirmado: ${schedulingResult.humanReadable}\nLink: ${schedulingResult.htmlLink || '‚Äî'}`;
      const followup = '\n\nSe precisar alterar ou cancelar, me avise por aqui. üëç';
      response.response = `${confirmation}${followup}`;
      // Persistiremos metadados ap√≥s enviar a resposta (j√° abaixo)
      response.metadata = {
        ...response.metadata,
        lastScheduledEvent: schedulingResult.eventPublic,
      };
    } else if (schedulingResult && schedulingResult.scheduled === false) {
      // Mensagem determin√≠stica de indisponibilidade (n√£o deixar o LLM confirmar acidentalmente)
      const header = schedulingResult.reason === 'outside_hours'
        ? '‚åõ Infelizmente este hor√°rio est√° fora do nosso expediente (8h √†s 18h, seg a sex).'
        : '‚ö†Ô∏è Este hor√°rio j√° est√° ocupado para esta modalidade.';
      const sugg = (schedulingResult.suggestions || [])
        .slice(0, 2)
        .map(s => `‚Ä¢ ${s.formatted}`)
        .join('\n');

      const suggestionsText = sugg ? `\n\nSugest√µes dispon√≠veis:\n${sugg}` : '';
      response.response = `${header}${suggestionsText}\n\nPosso reservar um desses hor√°rios para voc√™?`;
    } else if (schedulingResult === null) {
      // N√ÉO conseguiu parsear data/hora - FOR√áAR o bot a pedir formato correto
      console.log('‚ö†Ô∏è Parse falhou - for√ßando bot a pedir formato DD/MM');
      
      // Checar se a mensagem cont√©m termos relativos
      const hasRelativeTerms = /\b(amanha|amanh√£|hoje|depois|segunda|ter√ßa|terca|quarta|quinta|sexta|sabado|s√°bado|domingo)\b/i.test(msg.body);
      
      if (hasRelativeTerms) {
        // Sobrescrever resposta da IA para for√ßar pedido de data correta
        response.response = `Para garantir que n√£o haja erros no agendamento, preciso que voc√™ me informe a data no formato DD/MM e o hor√°rio.\n\nüìÖ Exemplo: 31/10 √†s 14:00\n\nQual data e hor√°rio voc√™ prefere? üòä`;
      }
    }
    
    // Tentar cancelar/remarcar pelo texto
    const cancelResult = await tryCancelOrRescheduleFromMessage(msg.body, fromNumber);
    if (cancelResult?.changed) {
      const confirmation = cancelResult.type === 'cancel'
        ? `‚úÖ Agendamento cancelado: ${cancelResult.humanReadable}`
        : `‚úÖ Agendamento remarcado: ${cancelResult.humanReadable}`;
      response.response = `${confirmation}\n\n${response.response}`;
    }
    
    if (response) {
      console.log('‚úÖ Response generated:', response.response.substring(0, 100) + '...');
      console.log('üì§ Sending message...');
      
      await sendMessage(fromNumber, response.response);
      console.log('‚úÖ Message sent successfully!');
      
      console.log('üíæ Updating conversation state...');
      await updateConversationState(sessionId, response.nextState, response.metadata);
      console.log('‚úÖ State updated to:', response.nextState);
    } else {
      console.log('‚ö†Ô∏è No response generated from chatbot');
    }
  } catch (error) {
    console.error('‚ùå ERROR in processChatbotMessage:', error);
    console.error('Stack trace:', error.stack);
    
    // S√≥ tentar enviar mensagem de erro se ainda estiver conectado
    if (status === 'connected' && client) {
      try {
        const contact = await msg.getContact();
        const fromNumber = contact.id.user;
        await sendMessage(fromNumber, 'Desculpe, estou tendo problemas t√©cnicos no momento. Um atendente humano entrar√° em contato em breve. üôè');
      } catch (sendError) {
        console.error('‚ùå Could not send error message to user:', sendError.message);
      }
    } else {
      console.error('‚ö†Ô∏è Cannot send error message - client disconnected');
    }
  }
}

async function getOrCreateSession(phoneNumber) {
  try {
    const result = await pool.query(
      `SELECT id FROM sessions WHERE phone_number = $1`,
      [phoneNumber]
    );

    if (result.rows.length > 0) {
      return result.rows[0].id;
    }

    const insertResult = await pool.query(
      `INSERT INTO sessions (phone_number, state, created_at)
       VALUES ($1, 'initial', NOW())
       RETURNING id`,
      [phoneNumber]
    );

    return insertResult.rows[0].id;
  } catch (error) {
    console.error('‚ùå Error getting/creating session:', error);
    throw error;
  }
}

async function getConversationState(sessionId) {
  try {
    const result = await pool.query(
      `SELECT state, metadata FROM sessions WHERE id = $1`,
      [sessionId]
    );

    if (result.rows.length > 0) {
      return {
        state: result.rows[0].state,
        metadata: result.rows[0].metadata || {},
      };
    }

    return { state: 'initial', metadata: {} };
  } catch (error) {
    console.error('‚ùå Error getting conversation state:', error);
    return { state: 'initial', metadata: {} };
  }
}

async function updateConversationState(sessionId, newState, metadata = {}) {
  try {
    await pool.query(
      `UPDATE sessions SET state = $1, metadata = $2, updated_at = NOW()
       WHERE id = $3`,
      [newState, JSON.stringify(metadata), sessionId]
    );
  } catch (error) {
    console.error('‚ùå Error updating conversation state:', error);
  }
}

async function generateChatbotResponse(message, stateObj, contact) {
  const openai = require('../config/openai');
  const { state, metadata } = stateObj;

  console.log('üîë Checking OpenAI API Key...');
  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå OPENAI_API_KEY not configured in .env file!');
    throw new Error('OpenAI API Key not configured');
  }
  console.log('‚úÖ OpenAI API Key configured');

  const customerName = contact.pushname || contact.name || 'Cliente';

  const systemPrompt = `
  Voc√™ √© **Maria**, a especialista virtual da **Artestofados**, empresa especializada em **fabrica√ß√£o e reforma de estofados** em Jo√£o Pessoa - PB.  
  Seu papel √© **atender clientes interessados nos servi√ßos da loja**, guiando-os com simpatia e clareza at√© a coleta de informa√ß√µes ou agendamento de visita.

  ---

  üéØ **OBJETIVO PRINCIPAL**
  Atender **apenas perguntas relacionadas √† Artestofados**, seus **servi√ßos, produtos, or√ßamentos, reformas, fabrica√ß√µes, agendamentos e informa√ß√µes da loja**.

  ‚ùå **N√ÉO RESPONDER** a perguntas fora do contexto da empresa (como d√∫vidas pessoais, piadas, pol√≠tica, tecnologia, etc).  
  Em caso de perguntas fora do escopo, diga gentilmente:
  > "Posso te ajudar com informa√ß√µes sobre nossos servi√ßos de estofados, reformas ou fabrica√ß√£o. üòä Quer saber mais sobre algum deles?"

  ---

  üí¨ **PERSONALIDADE E TOM**
  - Amig√°vel, calorosa e emp√°tica üíô  
  - Respostas concisas, mas completas  
  - Use emojis de forma leve e natural  
  - Trate o cliente pelo nome quando poss√≠vel  
  - Seja prestativa, paciente e educada  
  - Nunca pressione o cliente  

  ---

  üß≠ **FLUXO DA CONVERSA**

  ### 1. BOAS-VINDAS (state: initial)
  - Cumprimente com calor e simpatia  
  - Apresente-se como *Maria, especialista virtual da Artestofados*  
  - Pergunte o nome do cliente, se ainda n√£o souber  
  - Pergunte como pode ajudar  

  ---

  ### 2. CLASSIFICA√á√ÉO DO SERVI√áO (state: classifying)
  - Identifique se o cliente deseja **fabrica√ß√£o** ou **reforma**
  - Se n√£o ficar claro, pergunte educadamente  
  - **Reforma:** explique que ser√° necess√°rio enviar fotos do m√≥vel  
  - **Fabrica√ß√£o:** pergunte se o cliente j√° tem um projeto em mente  

  ---

  ### 3. COLETA DE INFORMA√á√ïES (state: collecting_info)

  #### üõãÔ∏è Para REFORMA:
  - Pergunte qual o tipo de m√≥vel, tamanho e problema  
  - Solicite fotos do m√≥vel  
  - Pergunte se j√° tem tecido escolhido  
  - Agrade√ßa e informe que a equipe retornar√° em breve  

  #### ü™ë Para FABRICA√á√ÉO:
  - Pergunte sobre o tipo de projeto desejado  
  - Caso queira cat√°logo, diga:
    > "Durante a visita, voc√™ poder√° conhecer nossos modelos, mas a maioria √© personalizada conforme seu gosto üòä"
  - Se perguntar sobre valores:
    > "Os valores variam conforme o projeto, mas posso agendar uma reuni√£o ou visita para or√ßamento mais preciso."
  - Ofere√ßa:  
    > "Posso agendar uma reuni√£o online ou uma visita na loja. Qual voc√™ prefere?"

  ---

  üìÖ **REGRAS DE AGENDAMENTO (CR√çTICAS)**

  ‚ö†Ô∏è **Formato obrigat√≥rio:** DD/MM/AAAA √†s HH:MM  
  - **NUNCA** aceite datas como ‚Äúamanh√£‚Äù, ‚Äúhoje‚Äù, ‚Äúsegunda-feira‚Äù, ‚Äúsemana que vem‚Äù, etc.  
  - Se o cliente usar termos relativos, responda:
    > "Para evitar erros, preciso da data completa no formato DD/MM/AAAA e o hor√°rio (por exemplo: 31/10/2025 √†s 14:00). Qual data voc√™ prefere?"
  - **NUNCA** confirme ou diga ‚Äúest√° agendado‚Äù, ‚Äúconfirmado‚Äù ou ‚Äúmarcado‚Äù sem antes receber uma data **no formato DD/MM/AAAA √†s HH:MM**.
  - Ap√≥s receber o formato correto, repita os detalhes exatamente como o cliente informou, confirmando que entendeu.

  ---

  ### 4. FINALIZA√á√ÉO (state: completed)
  - Agrade√ßa pela prefer√™ncia e simpatia do cliente  
  - Reforce os pr√≥ximos passos  
  - Deixe o canal aberto para d√∫vidas futuras  
  - Despe√ßa-se de forma gentil e calorosa  
    > "Obrigada pelo contato! üíô Ficarei feliz em ajudar sempre que precisar."

  ---

  üè¢ **INFORMA√á√ïES DA EMPRESA**
  - **Nome:** Artestofados  
  - **Endere√ßo:** Av. Almirante Barroso, 389, Centro ‚Äì Jo√£o Pessoa ‚Äì PB  
  - **CNPJ:** 08.621.718/0001-07  
  - **Hor√°rio de funcionamento:** Segunda a sexta, das 07:30 √†s 18:00  

  ---

  üí° **DICAS DE CONDUTA**
  - Fa√ßa **uma pergunta por vez**  
  - Sempre confirme o entendimento antes de prosseguir  
  - Seja educada, acolhedora e profissional  
  - Evite respostas autom√°ticas ou frias  
  - Mantenha o foco nos servi√ßos da empresa  
  - **NUNCA confirme agendamento sem formato DD/MM/AAAA e HH:MM**  
  - **NUNCA responda a perguntas fora do contexto da loja**
  `;


  const conversation = [
    { role: 'system', content: systemPrompt },
  ];

  if (metadata.history) {
    conversation.push(...metadata.history);
  }

  conversation.push({ role: 'user', content: message });

  try {
    console.log('ü§ñ Calling OpenAI API...');
    console.log('üìù Conversation length:', conversation.length, 'messages');
    
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: conversation,
      temperature: 0.7,
      max_tokens: 800
    });

    console.log('‚úÖ OpenAI response received');
    const response = completion.choices[0].message.content;
    console.log('üí¨ Response length:', response.length, 'chars');

    if (!metadata.history) metadata.history = [];
    metadata.history.push(
      { role: 'user', content: message },
      { role: 'assistant', content: response }
    );

    if (!metadata.customerName && customerName !== 'Cliente') {
      metadata.customerName = customerName;
    }

    let nextState = state;
    const lowerMessage = message.toLowerCase();
    
    if (state === 'initial') {
      nextState = 'classifying';
    } else if (state === 'classifying') {
      if (lowerMessage.includes('reform') || lowerMessage.includes('conser') || lowerMessage.includes('arrum')) {
        metadata.serviceType = 'reforma';
        nextState = 'collecting_info';
      } else if (lowerMessage.includes('fabric') || lowerMessage.includes('fazer') || lowerMessage.includes('novo')) {
        metadata.serviceType = 'fabricacao';
        nextState = 'collecting_info';
      }
    } else if (state === 'collecting_info') {
      if (metadata.serviceType === 'reforma' && (lowerMessage.includes('foto') || lowerMessage.includes('image'))) {
        nextState = 'waiting_photos';
      } else if (metadata.serviceType === 'fabricacao' && (lowerMessage.includes('agendar') || lowerMessage.includes('reuni√£o') || lowerMessage.includes('visita'))) {
        nextState = 'scheduling';
      }
      
      if (lowerMessage.includes('obrigad') || lowerMessage.includes('valeu') || lowerMessage.includes('ok')) {
        nextState = 'completed';
      }
    }

    return { response, nextState, metadata };
  } catch (error) {
    console.error('‚ùå ERROR calling OpenAI:', error);
    console.error('Error details:', {
      message: error.message,
      code: error.code,
      status: error.status,
      type: error.type
    });
    
    return {
      response: `Ol√°! üòä Seja bem-vindo(a) √† Artestofados!\n\nNo momento estou com um probleminha t√©cnico, mas fique tranquilo(a)! Um dos nossos atendentes vai te responder em breve.\n\nPor favor, me conte: como podemos ajudar voc√™ hoje?`,
      nextState: state,
      metadata
    };
  }
}

async function sendMessage(phoneNumber, response) {
  if (!client || status !== 'connected') {
    console.error('‚ùå Cannot send message - client not connected');
    throw new Error('WhatsApp client not connected');
  }

  try {
    const chatId = phoneNumber.includes('@c.us') 
      ? phoneNumber 
      : `${phoneNumber}@c.us`;
    
    console.log('üì§ Sending to:', chatId);
    console.log('üí¨ Message preview:', response.substring(0, 50) + '...');
    
    // Verificar se o chat existe antes de enviar
    try {
      const chat = await client.getChatById(chatId);
      if (!chat) {
        console.error('‚ùå Chat not found:', chatId);
        throw new Error('Chat not found');
      }
    } catch (chatError) {
      console.error('‚ùå Error getting chat:', chatError.message);
      // Tentar enviar mesmo assim
    }
    
    await client.sendMessage(chatId, response);
    console.log('‚úÖ Message sent successfully!');
  } catch (error) {
    console.error('‚ùå Error sending message:', error);
    
    // Se erro de conex√£o, marcar como desconectado
    if (error.message.includes('getChat') || error.message.includes('Evaluation failed')) {
      console.error('üîå WhatsApp connection lost - marking as disconnected');
      status = 'disconnected';
      client = null;
    }
    
    throw error;
  }
}

// ===== Helpers de agendamento pelo texto =====
function inferAgendaTypeFromText(text, fallback) {
  const t = (text || '').toLowerCase();
  if (t.includes('online') || t.includes('v√≠deo') || t.includes('video') || t.includes('reuni')) return 'online';
  if (t.includes('loja') || t.includes('visita') || t.includes('presenc')) return 'loja';
  return fallback || '';
}

// ENCONTRE ESTA FUN√á√ÉO (linha ~14):
function buildBrazilDate(year, monthIndex, day, hour = 0, minute = 0, second = 0, ms = 0) {
  return new Date(Date.UTC(year, monthIndex, day, hour + 3, minute, second, ms));
}

// ADICIONE LOGO AP√ìS:
function getBrazilToday() {
  const nowUTC = new Date();
  const formatter = new Intl.DateTimeFormat('pt-BR', {
    timeZone: 'America/Sao_Paulo',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  });
  const parts = formatter.formatToParts(nowUTC);
  const day = parseInt(parts.find(p => p.type === 'day').value, 10);
  const month = parseInt(parts.find(p => p.type === 'month').value, 10) - 1;
  const year = parseInt(parts.find(p => p.type === 'year').value, 10);
  return new Date(year, month, day);
}

function parseDateTimeFromText(text) {
  if (!text) return null;
  const t = text.toLowerCase().trim();
  const nowBrazil = getBrazilToday(); // Data de HOJE no Brasil

  function normalizeHourMinute(hhStr, mmStr) {
    const hour = Math.max(0, Math.min(23, parseInt(hhStr, 10)));
    const minute = mmStr != null ? Math.max(0, Math.min(59, parseInt(mmStr, 10))) : 0;
    return { hour, minute };
  }

  // ===== REMOVIDO: Express√µes relativas (hoje, amanh√£, etc) =====
  // Agora s√≥ aceita datas no formato DD/MM/AAAA ou DD/MM
  
  // Data expl√≠cita: DD/MM/AAAA ou DD/MM
  let explicitDate = null;
  let m = t.match(/\b(\d{1,2})\/(\d{1,2})\/(\d{4})\b/);
  if (m) {
    const [_, dd, mm, yyyy] = m;
    explicitDate = new Date(parseInt(yyyy, 10), parseInt(mm, 10) - 1, parseInt(dd, 10));
    console.log('üìÖ Data expl√≠cita detectada:', explicitDate.toLocaleDateString('pt-BR'));
  } else {
    m = t.match(/\b(\d{1,2})\/(\d{1,2})\b/);
    if (m) {
      const [_, dd, mm] = m;
      explicitDate = new Date(nowBrazil.getFullYear(), parseInt(mm, 10) - 1, parseInt(dd, 10));
      console.log('üìÖ Data expl√≠cita (sem ano) detectada:', explicitDate.toLocaleDateString('pt-BR'));
    }
  }

  // Se n√£o encontrou data no formato DD/MM, retorna null
  if (!explicitDate) {
    console.log('‚ùå Data n√£o encontrada no formato DD/MM ou DD/MM/AAAA');
    return null;
  }

  // Hora: "√†s 14h30", "14:00", "14h", "as 9h", "10hs"
  let timeMatch = t.match(/(?:\b√†s|\bas)?\s*(\d{1,2})(?::(\d{2}))?\s*(h|hs)?\b/);
  let hour = null, minute = null;
  if (timeMatch) {
    const { hour: h, minute: mnt } = normalizeHourMinute(timeMatch[1], timeMatch[2]);
    hour = h; minute = mnt;
    console.log('‚è∞ Hor√°rio detectado:', `${hour}:${String(minute).padStart(2, '0')}`);
  } else {
    console.log('‚ùå Hor√°rio n√£o encontrado');
    return null;
  }

  const finalHour = hour != null ? hour : 0;
  const finalMinute = minute != null ? minute : 0;
  const finalDate = buildBrazilDate(
    explicitDate.getFullYear(),
    explicitDate.getMonth(),
    explicitDate.getDate(),
    finalHour,
    finalMinute,
    0,
    0
  );

  if (isNaN(finalDate.getTime())) {
    console.log('‚ùå Data final inv√°lida');
    return null;
  }
  
  console.log('‚úÖ Data final parseada:', finalDate.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }));
  return finalDate;
}

async function tryCancelOrRescheduleFromMessage(message, phoneNumber) {
  try {
    const t = (message || '').toLowerCase();
    const wantsCancel = t.includes('cancelar') || t.includes('cancela') || t.includes('desmarcar');
    const wantsReschedule = t.includes('remarcar') || t.includes('remarca') || t.includes('alterar') || t.includes('mudar hor√°rio') || t.includes('mudar horario');
    if (!wantsCancel && !wantsReschedule) return null;

    const { findLatestByPhone, findConflicts } = require('../models/agendamento');
    const latest = await findLatestByPhone(phoneNumber);
    if (!latest) return null;

    const start = new Date(latest.start_time);
    const end = new Date(latest.end_time);
    const humanBase = `${latest.summary} em ${start.toLocaleString('pt-BR')} - ${end.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}`;

    if (wantsCancel) {
      try {
        if (latest.calendar_event_id) {
          const { getAuthClient } = require('../config/google-calendar');
          const auth = getAuthClient();
          const calendar = require('googleapis').google.calendar({ version: 'v3', auth });
          await calendar.events.delete({ calendarId: 'primary', eventId: latest.calendar_event_id });
        }
      } catch (err) {
        console.error('‚ö†Ô∏è Could not delete calendar event:', err.message);
      }
      await pool.query('DELETE FROM appointments WHERE id = $1', [latest.id]);
      return { changed: true, type: 'cancel', humanReadable: humanBase };
    }

    if (wantsReschedule) {
      const newDate = parseDateTimeFromText(message);
      if (!newDate) return null;
      const duration = end.getTime() - start.getTime();
      const newEnd = new Date(newDate.getTime() + duration);

      const conflicts = await findConflicts(newDate, newEnd, latest.agenda_type);
      const conflictsFiltered = conflicts.filter(c => c.id !== latest.id);
      if (conflictsFiltered.length > 0) return null;

      if (latest.calendar_event_id) {
        try {
          const { getAuthClient } = require('../config/google-calendar');
          const auth = getAuthClient();
          const calendar = require('googleapis').google.calendar({ version: 'v3', auth });
          await calendar.events.patch({
            calendarId: 'primary',
            eventId: latest.calendar_event_id,
            resource: {
              start: { dateTime: newDate.toISOString(), timeZone: 'America/Sao_Paulo' },
              end: { dateTime: newEnd.toISOString(), timeZone: 'America/Sao_Paulo' },
            }
          });
        } catch (err) {
          console.error('‚ö†Ô∏è Could not patch calendar event:', err.message);
        }
      }

      await pool.query(
        `UPDATE appointments SET start_time = $2, end_time = $3, updated_at = NOW() WHERE id = $1`,
        [latest.id, newDate, newEnd]
      );

      const humanNew = `${latest.summary} em ${newDate.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })} - ${newEnd.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit', timeZone: 'America/Sao_Paulo' })}`;
      return { changed: true, type: 'reschedule', humanReadable: humanNew };
    }

    return null;
  } catch (err) {
    console.error('‚ùå Cancel/Reschedule parse failed:', err.message);
    return null;
  }
}

async function tryScheduleFromMessage(message, metadata, contact, phoneNumber) {
  try {
    const customerName = contact.pushname || contact.name || '';
    const rawType = inferAgendaTypeFromText(message, metadata?.agendaType);
    const agendaType = (rawType === 'visita' || rawType === 'presencial') ? 'loja' : rawType;
    const start = parseDateTimeFromText(message);
    
    console.log('\nüîç === TENTANDO AGENDAR ===');
    console.log('üìù Mensagem:', message);
    console.log('üìÖ Data parseada:', start?.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }));
    console.log('üè∑Ô∏è Tipo de agenda:', agendaType);
    
    if (!agendaType || !start) {
      console.log('‚ùå Dados insuficientes para agendamento');
      return null;
    }
    const duration = 60;
    const end = new Date(start.getTime() + duration * 60000);

    console.log('‚è∞ Hor√°rio solicitado:', start.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }));
    console.log('‚è∞ Hor√°rio fim:', end.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }));

    // Validar expediente (8-18h, dias √∫teis) em America/Sao_Paulo
    const { isWithinWorkingHours, suggestAlternativeTimes } = require('../config/google-calendar');
    if (!isWithinWorkingHours(start) || !isWithinWorkingHours(end)) {
      console.log('‚ö†Ô∏è FORA DO HOR√ÅRIO DE EXPEDIENTE');
      let suggestions = [];
      try {
        suggestions = await suggestAlternativeTimes(start, duration, { agendaType });
      } catch (e) {
        suggestions = [];
      }
      return {
        scheduled: false,
        reason: 'outside_hours',
        suggestions: suggestions.map(s => ({
          start: s.start,
          end: s.end,
          formatted: `${s.start.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })} - ${s.end.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit', timeZone: 'America/Sao_Paulo' })}`
        }))
      };
    }

    const autoSummary = agendaType === 'online'
      ? `Atendimento - Reuni√£o Online${customerName ? ` | ${customerName}` : ''}`
      : `Atendimento - Visita √† Loja${customerName ? ` | ${customerName}` : ''}`;

    // Verificar conflitos no banco (mesmo tipo)
    const { findConflicts } = require('../models/agendamento');
    const dbConflicts = await findConflicts(start, end, agendaType);
    
    console.log('üîç Conflitos encontrados:', dbConflicts.length);
    if (dbConflicts.length > 0) {
      console.log('‚ùå HOR√ÅRIO J√Å OCUPADO');
      dbConflicts.forEach(c => {
        console.log(`   - ${c.summary}: ${new Date(c.start_time).toLocaleString('pt-BR')} - ${new Date(c.end_time).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}`);
      });
      
      let suggestions = [];
      try {
        suggestions = await suggestAlternativeTimes(start, duration, { agendaType });
        console.log('üí° Sugest√µes alternativas:', suggestions.length);
      } catch (e) {
        suggestions = [];
      }
      try {
        suggestions = await suggestAlternativeTimes(start, duration, { agendaType });
      } catch (e) {
        suggestions = [];
      }
      return {
        scheduled: false,
        reason: 'conflict',
        suggestions: suggestions.map(s => ({
          start: s.start,
          end: s.end,
          formatted: `${s.start.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })} - ${s.end.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit', timeZone: 'America/Sao_Paulo' })}`
        }))
      };
    }

    // Persistir no banco (sem criar evento no Google Calendar) e somente confirmar se salvar com sucesso
    
    try {
      console.log('üíæ Salvando agendamento no banco...');
      await createAppointment({
        calendarEventId: null,
        summary: autoSummary,
        description: '',
        startTime: start,
        endTime: end,
        agendaType,
        clientName: customerName || null,
        phoneNumber: phoneNumber || null,
      });
      const humanReadable = `${agendaType === 'online' ? 'Reuni√£o online' : 'Visita √† loja'} em ${start.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })} - ${end.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit', timeZone: 'America/Sao_Paulo' })}`;
      console.log('‚úÖ AGENDAMENTO CONFIRMADO:', humanReadable);
      return {
        scheduled: true,
        humanReadable,
        htmlLink: undefined,
        eventPublic: {
          id: undefined,
          summary: autoSummary,
          start: start.toISOString(),
          end: end.toISOString(),
          agendaType,
          htmlLink: undefined,
        }
      };
    } catch (persistErr) {
      console.error('‚ö†Ô∏è Could not persist appointment:', persistErr.message);
      const reason = String(persistErr.message || '').includes('conflict') ? 'conflict' : 'persist_error';
      return {
        scheduled: false,
        reason,
        suggestions: []
      };
    }
  } catch (err) {
    console.error('‚ùå Scheduling from message failed:', err.message);
    return { scheduled: false, reason: 'error', suggestions: [] };
  }
}

function pauseBot(hours = 2) {
  pausedUntil = new Date(Date.now() + hours * 60 * 60 * 1000);
  console.log(`‚è∏Ô∏è Bot paused globally until ${pausedUntil}`);
}

function pauseChat(phoneNumber, hours = 2) {
  const pauseUntil = new Date(Date.now() + hours * 60 * 60 * 1000);
  chatPauses.set(phoneNumber, pauseUntil);
  console.log(`‚è∏Ô∏è Chat ${phoneNumber} paused until ${pauseUntil.toLocaleString('pt-BR')}`);
}

function resumeBot() {
  pausedUntil = null;
  console.log('‚ñ∂Ô∏è Bot resumed globally');
}

function resumeChat(phoneNumber) {
  if (chatPauses.has(phoneNumber)) {
    chatPauses.delete(phoneNumber);
    console.log(`‚ñ∂Ô∏è Chat ${phoneNumber} resumed`);
    return true;
  }
  return false;
}

function isPaused(phoneNumber = null) {
  if (pausedUntil) {
    if (Date.now() > pausedUntil.getTime()) {
      pausedUntil = null;
    } else {
      return true;
    }
  }

  if (phoneNumber && chatPauses.has(phoneNumber)) {
    const chatPauseUntil = chatPauses.get(phoneNumber);
    if (Date.now() > chatPauseUntil.getTime()) {
      chatPauses.delete(phoneNumber);
    } else {
      return true;
    }
  }

  return false;
}

function getQRString() {
  console.log('üì≤ QR String requested:', {
    hasQRString: !!qrString,
    qrLength: qrString?.length || 0,
    status: status
  });
  
  return qrString;
}

function getStatus() {
  const statusInfo = {
    status,
    paused: isPaused(),
    pausedUntil: pausedUntil?.toISOString(),
    hasQRString: !!qrString,
    qrStringLength: qrString?.length || 0,
    clientExists: !!client,
    initializationAttempt,
    chatPauses: Array.from(chatPauses.entries()).map(([phone, pauseUntil]) => ({
      phone,
      pausedUntil: pauseUntil.toISOString()
    }))
  };
  
  console.log('üìä Status requested:', statusInfo);
  return statusInfo;
}

module.exports = {
  initializeWhatsApp,
  connect: async () => {
    console.log('üîå Connect called');
    
    try {
      const cli = await initializeWhatsApp(false);
      console.log('‚è≥ Initializing WhatsApp client...');
      await cli.initialize();
      console.log('‚úÖ Client initialized successfully');
    } catch (error) {
      console.error('‚ùå Error during connection:', error.message);
      
      if (initializationAttempt < 3) {
        console.log('üîÑ Retrying with cleanup...');
        await killOldChromeProcesses();
        cleanupSession();
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        const cli = await initializeWhatsApp(true);
        await cli.initialize();
      } else {
        throw new Error('Failed after multiple attempts. Please delete whatsapp-session folder manually.');
      }
    }
  },
  disconnect: async () => {
    console.log('üîå Disconnect called');
    if (client) {
      try {
        await client.destroy();
      } catch (err) {
        console.log('‚ö†Ô∏è Error destroying client:', err.message);
      }
      client = null;
      status = 'disconnected';
      qrString = '';
      cleanupSession();
      console.log('‚úÖ Client destroyed and cleaned up');
    }
  },
  pauseBot,
  pauseChat,
  resumeBot,
  resumeChat,
  getQRString,
  getStatus,
  sendMessage,
  cleanupSession,
};